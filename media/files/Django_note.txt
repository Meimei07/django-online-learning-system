*newly to Django
 -check python version
 -in cmd, run "pip install pipenv"
 -make sure pipenv is installed, "pipenv --version"
 -then follow below to install Django

*to install Django (for Django project)
 -create a folder
 -open cmd
 -cd to that folder
 -type "pipenv install django"
 -then type "pipenv shell"
 -last type "django-admin startproject [app name] ."

*to run: python manage.py runserver

*to create another app in the project: python manage.py startapp [app name]

*by following MVT (Model-View-Template)
 -start with M by creating class in models.py
 -after creating model, run some command:
  +python manage.py makemigriation [model's name with s (convention)]
  +python manage.py migrate
  +register model in admin.py by write admin.site.register(class name)
 -then V, write a function in views.py that responses to the request
 -before go to T, we need to write in urls.py
 -then, urls.py in main app and also add app in setting.py
 -lastly T, create templates folder and have your template which is HTML files in it

*to install Django and Django rest framework (for Django api project)
 -create folder
 -open folder with vs code
 -open vs code terminal 
 -run pipenv install django djangorestframework (this will install both Django and its rest framework)
 -run pipenv shell to activate virtual environment
 -run django-admin startproject name .
 -run python manage.py runserver to check if everything works
 -don't forget to add 'rest_framework' to installed app in settings.json

*authentication in Django api with JWT
 -install pip install PyJWT
 -add this to settings.py

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'employees.auth.EmployeeJWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

 -if employee is the one who needs to login, add these 3 functions in models.py

def save(self, *args, **kwargs):
    if not self.password.startswith("pbkdf2_"):
      self.password = make_password(self.password)
    super().save(*args, **kwargs)

def check_password(self, raw_password):
    return check_password(raw_password, self.password)

@property
def is_authenticated(self):
    return True

 -first function is encrypt password, second function is to check password, and last one

 -add employee login view in views.py
